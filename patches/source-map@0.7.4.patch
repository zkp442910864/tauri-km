diff --git a/lib/read-wasm.js b/lib/read-wasm.js
index e81c17722208b15bdeecca279bb1431f2963a1ca..14183bdf690b43036afd8f7ed429c17d2ec370c8 100644
--- a/lib/read-wasm.js
+++ b/lib/read-wasm.js
@@ -1,49 +1,20 @@
-/* Determine browser vs node environment by testing the default top level context. Solution courtesy of: https://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser */
-const isBrowserEnvironment = (function() {
-    // eslint-disable-next-line no-undef
-    return (typeof window !== "undefined") && (this === window);
-}).call();
 
-if (isBrowserEnvironment) {
-  // Web version of reading a wasm file into an array buffer.
+// Web version of reading a wasm file into an array buffer.
 
-  let mappingsWasm = null;
+let mappingsWasm = null;
 
-  module.exports = function readWasm() {
-    if (typeof mappingsWasm === "string") {
-      return fetch(mappingsWasm)
-        .then(response => response.arrayBuffer());
-    }
-    if (mappingsWasm instanceof ArrayBuffer) {
-      return Promise.resolve(mappingsWasm);
-    }
-    throw new Error("You must provide the string URL or ArrayBuffer contents " +
-                    "of lib/mappings.wasm by calling " +
-                    "SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) " +
-                    "before using SourceMapConsumer");
-  };
-
-  module.exports.initialize = input => mappingsWasm = input;
-} else {
-  // Node version of reading a wasm file into an array buffer.
-  const fs = require("fs");
-  const path = require("path");
-
-  module.exports = function readWasm() {
-    return new Promise((resolve, reject) => {
-      const wasmPath = path.join(__dirname, "mappings.wasm");
-      fs.readFile(wasmPath, null, (error, data) => {
-        if (error) {
-          reject(error);
-          return;
-        }
-
-        resolve(data.buffer);
-      });
-    });
-  };
-
-  module.exports.initialize = _ => {
-    console.debug("SourceMapConsumer.initialize is a no-op when running in node.js");
-  };
+module.exports = function readWasm() {
+if (typeof mappingsWasm === "string") {
+    return fetch(mappingsWasm)
+    .then(response => response.arrayBuffer());
+}
+if (mappingsWasm instanceof ArrayBuffer) {
+    return Promise.resolve(mappingsWasm);
 }
+throw new Error("You must provide the string URL or ArrayBuffer contents " +
+                "of lib/mappings.wasm by calling " +
+                "SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) " +
+                "before using SourceMapConsumer");
+};
+
+module.exports.initialize = input => mappingsWasm = input;
\ No newline at end of file
diff --git a/source-map.d.ts b/source-map.d.ts
index 2459391592c19a0249514767a6d58563210bef28..40d94b6476d1fe1c3918d6392454b5254ec5de9b 100644
--- a/source-map.d.ts
+++ b/source-map.d.ts
@@ -184,6 +184,8 @@ export interface SourceMapConsumer {
      * Alternatively, you can use SourceMapConsumer.with to avoid needing to remember to call destroy.
      */
     destroy(): void;
+
+    initialize(config: {'lib/mappings.wasm': string | ArrayBuffer}): void;
 }
 
 export interface SourceMapConsumerConstructor {
@@ -237,6 +239,8 @@ export interface SourceMapConsumerConstructor {
      * ```
      */
     with<T>(rawSourceMap: RawSourceMap | RawIndexMap | string, sourceMapUrl: SourceMapUrl | null | undefined, callback: (consumer: BasicSourceMapConsumer | IndexedSourceMapConsumer) => Promise<T> | T): Promise<T>;
+
+    initialize(config: {'lib/mappings.wasm': string | ArrayBuffer}): void;
 }
 
 export const SourceMapConsumer: SourceMapConsumerConstructor;
